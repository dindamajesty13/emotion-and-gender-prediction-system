# -*- coding: utf-8 -*-
"""emotion-and-gender-prediction-system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vzZyW3lc96EITnCXpRB_GQyfIYoM7xDm

"""

# In[1]: Import libraries

import pandas as pd
import librosa
import os, glob
import numpy as np
from tqdm import tqdm
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

# In[2]: Import Dataset
for dirname, _, filenames in os.walk('your_data_path'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# In[3]: Function to extract features

def extract_feature(file_name):
    X, sample_rate = librosa.load(file_name)
    stft=np.abs(librosa.stft(X))
    result=np.array([])
    mfccs=np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=15).T,axis=0)
    result=np.hstack((result, mfccs))
    chroma=np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T,axis=0)
    result=np.hstack((result, chroma))
    mel=np.mean(librosa.feature.melspectrogram(X, sr=sample_rate).T,axis=0)
    result=np.hstack((result, mel))
    return result

# In[4]: Dictionary of emotions

emotions={
  '01':'neutral',
  '02':'calm',
  '03':'happy',
  '04':'sad',
  '05':'angry',
  '06':'fearful',
  '07':'disgust',
  '08':'surprised'
}

def gender(g):
    if int(g[0:2]) % 2 == 0:
        return 'female'
    else:
        return 'male'

# In[5]: Function to load data

def load_data(test_size=0.2):
    x,y=[],[]
    for file in tqdm(glob.glob("your_data_path")):
        file_name=os.path.basename(file)
        emotion=emotions[file_name.split("-")[2]] + '_' + gender(file_name.split("-")[-1])
        feature=extract_feature(file)
        x.append(feature)
        y.append(emotion)
    return train_test_split(np.array(x), y, test_size=test_size, random_state=1)

# In[6]: Split dataset for training and validating

X_train, X_val, y_train, y_val = load_data()

# In[7]: Check shapes
print((X_train.shape[0], X_val.shape[0]))

# In[8]: Scale data

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)

print(f'Features extracted: {X_train.shape[1]}')

# In[9]: Build model

from sklearn.neural_network import MLPClassifier

model=MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, hidden_layer_sizes=(300,), learning_rate='adaptive', max_iter=500)
model.fit(X_train,y_train)
print(model.score(X_train, y_train))

# In[10]: Make predictions on validation set or testing data

y_pred=model.predict(X_val)
print(model.score(X_val, y_val))

df=pd.DataFrame({'Actual': y_val, 'Predicted':y_pred})
df